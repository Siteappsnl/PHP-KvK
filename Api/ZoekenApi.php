<?php
/**
 * ZoekenApi
 * PHP version 8.1
 *
 * @category Class
 * @package  KvK
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * API Basisprofiel
 *
 * Documentatie voor API Basisprofiel.
 *
 * The version of the OpenAPI document: 1.4.0
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.14.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace KvK\Api;

use GuzzleHttp\Client;
use GuzzleHttp\ClientInterface;
use GuzzleHttp\Exception\ConnectException;
use GuzzleHttp\Exception\RequestException;
use GuzzleHttp\Psr7\MultipartStream;
use GuzzleHttp\Psr7\Request;
use GuzzleHttp\RequestOptions;
use Psr\Http\Message\RequestInterface;
use Psr\Http\Message\ResponseInterface;
use KvK\ApiException;
use KvK\Configuration;
use KvK\FormDataProcessor;
use KvK\HeaderSelector;
use KvK\ObjectSerializer;

/**
 * ZoekenApi Class Doc Comment
 *
 * @category Class
 * @package  KvK
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */
class ZoekenApi
{
    /**
     * @var ClientInterface
     */
    protected $client;

    /**
     * @var Configuration
     */
    protected $config;

    /**
     * @var HeaderSelector
     */
    protected $headerSelector;

    /**
     * @var int Host index
     */
    protected $hostIndex;

    /** @var string[] $contentTypes **/
    public const contentTypes = [
        'getResults' => [
            'application/json',
        ],
    ];

    /**
     * @param ClientInterface $client
     * @param Configuration   $config
     * @param HeaderSelector  $selector
     * @param int             $hostIndex (Optional) host index to select the list of hosts if defined in the OpenAPI spec
     */
    public function __construct(
        ?ClientInterface $client = null,
        ?Configuration $config = null,
        ?HeaderSelector $selector = null,
        int $hostIndex = 0
    ) {
        $this->client = $client ?: new Client();
        $this->config = $config ?: Configuration::getDefaultConfiguration();
        $this->headerSelector = $selector ?: new HeaderSelector();
        $this->hostIndex = $hostIndex;
    }

    /**
     * Set the host index
     *
     * @param int $hostIndex Host index (required)
     */
    public function setHostIndex($hostIndex): void
    {
        $this->hostIndex = $hostIndex;
    }

    /**
     * Get the host index
     *
     * @return int Host index
     */
    public function getHostIndex()
    {
        return $this->hostIndex;
    }

    /**
     * @return Configuration
     */
    public function getConfig()
    {
        return $this->config;
    }

    /**
     * Operation getResults
     *
     * Voor een bedrijf zoeken naar basisinformatie.
     *
     * @param  string|null $kvk_nummer Nederlands Kamer van Koophandel nummer dat bestaat uit 8 cijfers (optional)
     * @param  string|null $rsin Rechtspersonen Samenwerkingsverbanden Informatie Nummer dat bestaat uit 9 cijfers (optional)
     * @param  string|null $vestigingsnummer Vestigingsnummer dat bestaat uit 12 cijfers (optional)
     * @param  string|null $naam De naam waaronder een vestiging of rechtspersoon handelt (optional)
     * @param  string|null $straatnaam straatnaam (optional)
     * @param  string|null $plaats plaats (optional)
     * @param  string|null $postcode Mag alleen in combinatie met huisnummer of postbusnummer gezocht worden (optional)
     * @param  int|null $huisnummer Mag alleen in combinatie met postcode gezocht worden (optional)
     * @param  string|null $huisletter Optioneel. Alleen in combinatie met huisnummer (optional)
     * @param  int|null $postbusnummer Mag alleen in combinatie met postcode gezocht worden (optional)
     * @param  string[]|null $type Filter op type: hoofdvestiging, nevenvestiging en/of rechtspersoon (optional)
     * @param  bool|null $inclusief_inactieve_registraties Inclusief inactieve registraties (optional)
     * @param  int|null $pagina Paginanummer, minimaal 1 en maximaal 1000 (optional, default to 1)
     * @param  int|null $resultaten_per_pagina Kies het aantal resultaten per pagina, minimaal 1 en maximaal 100 (optional, default to 10)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getResults'] to see the possible values for this operation
     *
     * @throws \KvK\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \KvK\Model\Resultaat|\KvK\Model\Error|\KvK\Model\Error|\KvK\Model\Error|\KvK\Model\Error|\KvK\Model\Error|\KvK\Model\Error
     */
    public function getResults($kvk_nummer = null, $rsin = null, $vestigingsnummer = null, $naam = null, $straatnaam = null, $plaats = null, $postcode = null, $huisnummer = null, $huisletter = null, $postbusnummer = null, $type = null, $inclusief_inactieve_registraties = null, $pagina = 1, $resultaten_per_pagina = 10, string $contentType = self::contentTypes['getResults'][0])
    {
        list($response) = $this->getResultsWithHttpInfo($kvk_nummer, $rsin, $vestigingsnummer, $naam, $straatnaam, $plaats, $postcode, $huisnummer, $huisletter, $postbusnummer, $type, $inclusief_inactieve_registraties, $pagina, $resultaten_per_pagina, $contentType);
        return $response;
    }

    /**
     * Operation getResultsWithHttpInfo
     *
     * Voor een bedrijf zoeken naar basisinformatie.
     *
     * @param  string|null $kvk_nummer Nederlands Kamer van Koophandel nummer dat bestaat uit 8 cijfers (optional)
     * @param  string|null $rsin Rechtspersonen Samenwerkingsverbanden Informatie Nummer dat bestaat uit 9 cijfers (optional)
     * @param  string|null $vestigingsnummer Vestigingsnummer dat bestaat uit 12 cijfers (optional)
     * @param  string|null $naam De naam waaronder een vestiging of rechtspersoon handelt (optional)
     * @param  string|null $straatnaam (optional)
     * @param  string|null $plaats (optional)
     * @param  string|null $postcode Mag alleen in combinatie met huisnummer of postbusnummer gezocht worden (optional)
     * @param  int|null $huisnummer Mag alleen in combinatie met postcode gezocht worden (optional)
     * @param  string|null $huisletter Optioneel. Alleen in combinatie met huisnummer (optional)
     * @param  int|null $postbusnummer Mag alleen in combinatie met postcode gezocht worden (optional)
     * @param  string[]|null $type Filter op type: hoofdvestiging, nevenvestiging en/of rechtspersoon (optional)
     * @param  bool|null $inclusief_inactieve_registraties Inclusief inactieve registraties (optional)
     * @param  int|null $pagina Paginanummer, minimaal 1 en maximaal 1000 (optional, default to 1)
     * @param  int|null $resultaten_per_pagina Kies het aantal resultaten per pagina, minimaal 1 en maximaal 100 (optional, default to 10)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getResults'] to see the possible values for this operation
     *
     * @throws \KvK\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \KvK\Model\Resultaat|\KvK\Model\Error|\KvK\Model\Error|\KvK\Model\Error|\KvK\Model\Error|\KvK\Model\Error|\KvK\Model\Error, HTTP status code, HTTP response headers (array of strings)
     */
    public function getResultsWithHttpInfo($kvk_nummer = null, $rsin = null, $vestigingsnummer = null, $naam = null, $straatnaam = null, $plaats = null, $postcode = null, $huisnummer = null, $huisletter = null, $postbusnummer = null, $type = null, $inclusief_inactieve_registraties = null, $pagina = 1, $resultaten_per_pagina = 10, string $contentType = self::contentTypes['getResults'][0])
    {
        $request = $this->getResultsRequest($kvk_nummer, $rsin, $vestigingsnummer, $naam, $straatnaam, $plaats, $postcode, $huisnummer, $huisletter, $postbusnummer, $type, $inclusief_inactieve_registraties, $pagina, $resultaten_per_pagina, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    return $this->handleResponseWithDataType(
                        '\KvK\Model\Resultaat',
                        $request,
                        $response,
                    );
                case 400:
                    return $this->handleResponseWithDataType(
                        '\KvK\Model\Error',
                        $request,
                        $response,
                    );
                case 401:
                    return $this->handleResponseWithDataType(
                        '\KvK\Model\Error',
                        $request,
                        $response,
                    );
                case 403:
                    return $this->handleResponseWithDataType(
                        '\KvK\Model\Error',
                        $request,
                        $response,
                    );
                case 404:
                    return $this->handleResponseWithDataType(
                        '\KvK\Model\Error',
                        $request,
                        $response,
                    );
                case 406:
                    return $this->handleResponseWithDataType(
                        '\KvK\Model\Error',
                        $request,
                        $response,
                    );
                case 500:
                    return $this->handleResponseWithDataType(
                        '\KvK\Model\Error',
                        $request,
                        $response,
                    );
            }

            

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return $this->handleResponseWithDataType(
                '\KvK\Model\Resultaat',
                $request,
                $response,
            );
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\KvK\Model\Resultaat',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\KvK\Model\Error',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\KvK\Model\Error',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\KvK\Model\Error',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\KvK\Model\Error',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 406:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\KvK\Model\Error',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\KvK\Model\Error',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
            }
        

            throw $e;
        }
    }

    /**
     * Operation getResultsAsync
     *
     * Voor een bedrijf zoeken naar basisinformatie.
     *
     * @param  string|null $kvk_nummer Nederlands Kamer van Koophandel nummer dat bestaat uit 8 cijfers (optional)
     * @param  string|null $rsin Rechtspersonen Samenwerkingsverbanden Informatie Nummer dat bestaat uit 9 cijfers (optional)
     * @param  string|null $vestigingsnummer Vestigingsnummer dat bestaat uit 12 cijfers (optional)
     * @param  string|null $naam De naam waaronder een vestiging of rechtspersoon handelt (optional)
     * @param  string|null $straatnaam (optional)
     * @param  string|null $plaats (optional)
     * @param  string|null $postcode Mag alleen in combinatie met huisnummer of postbusnummer gezocht worden (optional)
     * @param  int|null $huisnummer Mag alleen in combinatie met postcode gezocht worden (optional)
     * @param  string|null $huisletter Optioneel. Alleen in combinatie met huisnummer (optional)
     * @param  int|null $postbusnummer Mag alleen in combinatie met postcode gezocht worden (optional)
     * @param  string[]|null $type Filter op type: hoofdvestiging, nevenvestiging en/of rechtspersoon (optional)
     * @param  bool|null $inclusief_inactieve_registraties Inclusief inactieve registraties (optional)
     * @param  int|null $pagina Paginanummer, minimaal 1 en maximaal 1000 (optional, default to 1)
     * @param  int|null $resultaten_per_pagina Kies het aantal resultaten per pagina, minimaal 1 en maximaal 100 (optional, default to 10)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getResults'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getResultsAsync($kvk_nummer = null, $rsin = null, $vestigingsnummer = null, $naam = null, $straatnaam = null, $plaats = null, $postcode = null, $huisnummer = null, $huisletter = null, $postbusnummer = null, $type = null, $inclusief_inactieve_registraties = null, $pagina = 1, $resultaten_per_pagina = 10, string $contentType = self::contentTypes['getResults'][0])
    {
        return $this->getResultsAsyncWithHttpInfo($kvk_nummer, $rsin, $vestigingsnummer, $naam, $straatnaam, $plaats, $postcode, $huisnummer, $huisletter, $postbusnummer, $type, $inclusief_inactieve_registraties, $pagina, $resultaten_per_pagina, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getResultsAsyncWithHttpInfo
     *
     * Voor een bedrijf zoeken naar basisinformatie.
     *
     * @param  string|null $kvk_nummer Nederlands Kamer van Koophandel nummer dat bestaat uit 8 cijfers (optional)
     * @param  string|null $rsin Rechtspersonen Samenwerkingsverbanden Informatie Nummer dat bestaat uit 9 cijfers (optional)
     * @param  string|null $vestigingsnummer Vestigingsnummer dat bestaat uit 12 cijfers (optional)
     * @param  string|null $naam De naam waaronder een vestiging of rechtspersoon handelt (optional)
     * @param  string|null $straatnaam (optional)
     * @param  string|null $plaats (optional)
     * @param  string|null $postcode Mag alleen in combinatie met huisnummer of postbusnummer gezocht worden (optional)
     * @param  int|null $huisnummer Mag alleen in combinatie met postcode gezocht worden (optional)
     * @param  string|null $huisletter Optioneel. Alleen in combinatie met huisnummer (optional)
     * @param  int|null $postbusnummer Mag alleen in combinatie met postcode gezocht worden (optional)
     * @param  string[]|null $type Filter op type: hoofdvestiging, nevenvestiging en/of rechtspersoon (optional)
     * @param  bool|null $inclusief_inactieve_registraties Inclusief inactieve registraties (optional)
     * @param  int|null $pagina Paginanummer, minimaal 1 en maximaal 1000 (optional, default to 1)
     * @param  int|null $resultaten_per_pagina Kies het aantal resultaten per pagina, minimaal 1 en maximaal 100 (optional, default to 10)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getResults'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getResultsAsyncWithHttpInfo($kvk_nummer = null, $rsin = null, $vestigingsnummer = null, $naam = null, $straatnaam = null, $plaats = null, $postcode = null, $huisnummer = null, $huisletter = null, $postbusnummer = null, $type = null, $inclusief_inactieve_registraties = null, $pagina = 1, $resultaten_per_pagina = 10, string $contentType = self::contentTypes['getResults'][0])
    {
        $returnType = '\KvK\Model\Resultaat';
        $request = $this->getResultsRequest($kvk_nummer, $rsin, $vestigingsnummer, $naam, $straatnaam, $plaats, $postcode, $huisnummer, $huisletter, $postbusnummer, $type, $inclusief_inactieve_registraties, $pagina, $resultaten_per_pagina, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getResults'
     *
     * @param  string|null $kvk_nummer Nederlands Kamer van Koophandel nummer dat bestaat uit 8 cijfers (optional)
     * @param  string|null $rsin Rechtspersonen Samenwerkingsverbanden Informatie Nummer dat bestaat uit 9 cijfers (optional)
     * @param  string|null $vestigingsnummer Vestigingsnummer dat bestaat uit 12 cijfers (optional)
     * @param  string|null $naam De naam waaronder een vestiging of rechtspersoon handelt (optional)
     * @param  string|null $straatnaam (optional)
     * @param  string|null $plaats (optional)
     * @param  string|null $postcode Mag alleen in combinatie met huisnummer of postbusnummer gezocht worden (optional)
     * @param  int|null $huisnummer Mag alleen in combinatie met postcode gezocht worden (optional)
     * @param  string|null $huisletter Optioneel. Alleen in combinatie met huisnummer (optional)
     * @param  int|null $postbusnummer Mag alleen in combinatie met postcode gezocht worden (optional)
     * @param  string[]|null $type Filter op type: hoofdvestiging, nevenvestiging en/of rechtspersoon (optional)
     * @param  bool|null $inclusief_inactieve_registraties Inclusief inactieve registraties (optional)
     * @param  int|null $pagina Paginanummer, minimaal 1 en maximaal 1000 (optional, default to 1)
     * @param  int|null $resultaten_per_pagina Kies het aantal resultaten per pagina, minimaal 1 en maximaal 100 (optional, default to 10)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getResults'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getResultsRequest($kvk_nummer = null, $rsin = null, $vestigingsnummer = null, $naam = null, $straatnaam = null, $plaats = null, $postcode = null, $huisnummer = null, $huisletter = null, $postbusnummer = null, $type = null, $inclusief_inactieve_registraties = null, $pagina = 1, $resultaten_per_pagina = 10, string $contentType = self::contentTypes['getResults'][0])
    {

        if ($kvk_nummer !== null && !preg_match("/^[0-9]{8}$/", $kvk_nummer)) {
            throw new \InvalidArgumentException("invalid value for \"kvk_nummer\" when calling ZoekenApi.getResults, must conform to the pattern /^[0-9]{8}$/.");
        }
        
        if ($rsin !== null && !preg_match("/^[0-9]{9}$/", $rsin)) {
            throw new \InvalidArgumentException("invalid value for \"rsin\" when calling ZoekenApi.getResults, must conform to the pattern /^[0-9]{9}$/.");
        }
        
        if ($vestigingsnummer !== null && !preg_match("/^[0-9]{12}$/", $vestigingsnummer)) {
            throw new \InvalidArgumentException("invalid value for \"vestigingsnummer\" when calling ZoekenApi.getResults, must conform to the pattern /^[0-9]{12}$/.");
        }
        



        if ($postcode !== null && !preg_match("/^[0-9]{4}[a-z,A-Z]{2}$/", $postcode)) {
            throw new \InvalidArgumentException("invalid value for \"postcode\" when calling ZoekenApi.getResults, must conform to the pattern /^[0-9]{4}[a-z,A-Z]{2}$/.");
        }
        
        if ($huisnummer !== null && !preg_match("/^[0-9]{1,5}$/", $huisnummer)) {
            throw new \InvalidArgumentException("invalid value for \"huisnummer\" when calling ZoekenApi.getResults, must conform to the pattern /^[0-9]{1,5}$/.");
        }
        
        if ($huisletter !== null && !preg_match("/^[a-z,A-Z]{1}$/", $huisletter)) {
            throw new \InvalidArgumentException("invalid value for \"huisletter\" when calling ZoekenApi.getResults, must conform to the pattern /^[a-z,A-Z]{1}$/.");
        }
        
        if ($postbusnummer !== null && !preg_match("/^[0-9]{1,5}$/", $postbusnummer)) {
            throw new \InvalidArgumentException("invalid value for \"postbusnummer\" when calling ZoekenApi.getResults, must conform to the pattern /^[0-9]{1,5}$/.");
        }
        


        if ($pagina !== null && $pagina > 1000) {
            throw new \InvalidArgumentException('invalid value for "$pagina" when calling ZoekenApi.getResults, must be smaller than or equal to 1000.');
        }
        
        if ($resultaten_per_pagina !== null && $resultaten_per_pagina > 100) {
            throw new \InvalidArgumentException('invalid value for "$resultaten_per_pagina" when calling ZoekenApi.getResults, must be smaller than or equal to 100.');
        }
        if ($resultaten_per_pagina !== null && $resultaten_per_pagina < 1) {
            throw new \InvalidArgumentException('invalid value for "$resultaten_per_pagina" when calling ZoekenApi.getResults, must be bigger than or equal to 1.');
        }
        

        $resourcePath = '/v2/zoeken';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $kvk_nummer,
            'kvkNummer', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $rsin,
            'rsin', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $vestigingsnummer,
            'vestigingsnummer', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $naam,
            'naam', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $straatnaam,
            'straatnaam', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $plaats,
            'plaats', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $postcode,
            'postcode', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $huisnummer,
            'huisnummer', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $huisletter,
            'huisletter', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $postbusnummer,
            'postbusnummer', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $type,
            'type', // param base name
            'array', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $inclusief_inactieve_registraties,
            'inclusiefInactieveRegistraties', // param base name
            'boolean', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $pagina,
            'pagina', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $resultaten_per_pagina,
            'resultatenPerPagina', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);




        $headers = $this->headerSelector->selectHeaders(
            ['application/json', 'application/hal+json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('apikey');
        if ($apiKey !== null) {
            $headers['apikey'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Create http client option
     *
     * @throws \RuntimeException on file opening failure
     * @return array of http client options
     */
    protected function createHttpClientOption()
    {
        $options = [];
        if ($this->config->getDebug()) {
            $options[RequestOptions::DEBUG] = fopen($this->config->getDebugFile(), 'a');
            if (!$options[RequestOptions::DEBUG]) {
                throw new \RuntimeException('Failed to open the debug file: ' . $this->config->getDebugFile());
            }
        }

        return $options;
    }

    private function handleResponseWithDataType(
        string $dataType,
        RequestInterface $request,
        ResponseInterface $response
    ): array {
        if ($dataType === '\SplFileObject') {
            $content = $response->getBody(); //stream goes to serializer
        } else {
            $content = (string) $response->getBody();
            if ($dataType !== 'string') {
                try {
                    $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                } catch (\JsonException $exception) {
                    throw new ApiException(
                        sprintf(
                            'Error JSON decoding server response (%s)',
                            $request->getUri()
                        ),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                        $content
                    );
                }
            }
        }

        return [
            ObjectSerializer::deserialize($content, $dataType, []),
            $response->getStatusCode(),
            $response->getHeaders()
        ];
    }

    private function responseWithinRangeCode(
        string $rangeCode,
        int $statusCode
    ): bool {
        $left = (int) ($rangeCode[0].'00');
        $right = (int) ($rangeCode[0].'99');

        return $statusCode >= $left && $statusCode <= $right;
    }
}
