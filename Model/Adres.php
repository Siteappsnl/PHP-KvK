<?php
/**
 * Adres
 *
 * PHP version 8.1
 *
 * @category Class
 * @package  KvK
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * API Basisprofiel
 *
 * Documentatie voor API Basisprofiel.
 *
 * The version of the OpenAPI document: 1.4.0
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.14.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace KvK\Model;

use \ArrayAccess;
use \KvK\ObjectSerializer;

/**
 * Adres Class Doc Comment
 *
 * @category Class
 * @package  KvK
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class Adres implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'Adres';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'type' => 'string',
        'ind_afgeschermd' => 'string',
        'volledig_adres' => 'string',
        'straatnaam' => 'string',
        'huisnummer' => 'int',
        'huisletter' => 'string',
        'huisnummer_toevoeging' => 'string',
        'toevoeging_adres' => 'string',
        'postcode' => 'string',
        'postbusnummer' => 'int',
        'plaats' => 'string',
        'straat_huisnummer' => 'string',
        'postcode_woonplaats' => 'string',
        'regio' => 'string',
        'land' => 'string',
        'geo_data' => '\KvK\Model\GeoData'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'type' => null,
        'ind_afgeschermd' => null,
        'volledig_adres' => null,
        'straatnaam' => null,
        'huisnummer' => 'int32',
        'huisletter' => null,
        'huisnummer_toevoeging' => null,
        'toevoeging_adres' => null,
        'postcode' => null,
        'postbusnummer' => 'int32',
        'plaats' => null,
        'straat_huisnummer' => null,
        'postcode_woonplaats' => null,
        'regio' => null,
        'land' => null,
        'geo_data' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'type' => false,
        'ind_afgeschermd' => false,
        'volledig_adres' => false,
        'straatnaam' => false,
        'huisnummer' => false,
        'huisletter' => false,
        'huisnummer_toevoeging' => false,
        'toevoeging_adres' => false,
        'postcode' => false,
        'postbusnummer' => false,
        'plaats' => false,
        'straat_huisnummer' => false,
        'postcode_woonplaats' => false,
        'regio' => false,
        'land' => false,
        'geo_data' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'type' => 'type',
        'ind_afgeschermd' => 'indAfgeschermd',
        'volledig_adres' => 'volledigAdres',
        'straatnaam' => 'straatnaam',
        'huisnummer' => 'huisnummer',
        'huisletter' => 'huisletter',
        'huisnummer_toevoeging' => 'huisnummerToevoeging',
        'toevoeging_adres' => 'toevoegingAdres',
        'postcode' => 'postcode',
        'postbusnummer' => 'postbusnummer',
        'plaats' => 'plaats',
        'straat_huisnummer' => 'straatHuisnummer',
        'postcode_woonplaats' => 'postcodeWoonplaats',
        'regio' => 'regio',
        'land' => 'land',
        'geo_data' => 'geoData'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'type' => 'setType',
        'ind_afgeschermd' => 'setIndAfgeschermd',
        'volledig_adres' => 'setVolledigAdres',
        'straatnaam' => 'setStraatnaam',
        'huisnummer' => 'setHuisnummer',
        'huisletter' => 'setHuisletter',
        'huisnummer_toevoeging' => 'setHuisnummerToevoeging',
        'toevoeging_adres' => 'setToevoegingAdres',
        'postcode' => 'setPostcode',
        'postbusnummer' => 'setPostbusnummer',
        'plaats' => 'setPlaats',
        'straat_huisnummer' => 'setStraatHuisnummer',
        'postcode_woonplaats' => 'setPostcodeWoonplaats',
        'regio' => 'setRegio',
        'land' => 'setLand',
        'geo_data' => 'setGeoData'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'type' => 'getType',
        'ind_afgeschermd' => 'getIndAfgeschermd',
        'volledig_adres' => 'getVolledigAdres',
        'straatnaam' => 'getStraatnaam',
        'huisnummer' => 'getHuisnummer',
        'huisletter' => 'getHuisletter',
        'huisnummer_toevoeging' => 'getHuisnummerToevoeging',
        'toevoeging_adres' => 'getToevoegingAdres',
        'postcode' => 'getPostcode',
        'postbusnummer' => 'getPostbusnummer',
        'plaats' => 'getPlaats',
        'straat_huisnummer' => 'getStraatHuisnummer',
        'postcode_woonplaats' => 'getPostcodeWoonplaats',
        'regio' => 'getRegio',
        'land' => 'getLand',
        'geo_data' => 'getGeoData'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[]|null $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(?array $data = null)
    {
        $this->setIfExists('type', $data ?? [], null);
        $this->setIfExists('ind_afgeschermd', $data ?? [], null);
        $this->setIfExists('volledig_adres', $data ?? [], null);
        $this->setIfExists('straatnaam', $data ?? [], null);
        $this->setIfExists('huisnummer', $data ?? [], null);
        $this->setIfExists('huisletter', $data ?? [], null);
        $this->setIfExists('huisnummer_toevoeging', $data ?? [], null);
        $this->setIfExists('toevoeging_adres', $data ?? [], null);
        $this->setIfExists('postcode', $data ?? [], null);
        $this->setIfExists('postbusnummer', $data ?? [], null);
        $this->setIfExists('plaats', $data ?? [], null);
        $this->setIfExists('straat_huisnummer', $data ?? [], null);
        $this->setIfExists('postcode_woonplaats', $data ?? [], null);
        $this->setIfExists('regio', $data ?? [], null);
        $this->setIfExists('land', $data ?? [], null);
        $this->setIfExists('geo_data', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets type
     *
     * @return string|null
     */
    public function getType()
    {
        return $this->container['type'];
    }

    /**
     * Sets type
     *
     * @param string|null $type Correspondentieadres en/of bezoekadres
     *
     * @return self
     */
    public function setType($type)
    {
        if (is_null($type)) {
            throw new \InvalidArgumentException('non-nullable type cannot be null');
        }
        $this->container['type'] = $type;

        return $this;
    }

    /**
     * Gets ind_afgeschermd
     *
     * @return string|null
     */
    public function getIndAfgeschermd()
    {
        return $this->container['ind_afgeschermd'];
    }

    /**
     * Sets ind_afgeschermd
     *
     * @param string|null $ind_afgeschermd Indicatie of het adres is afgeschermd
     *
     * @return self
     */
    public function setIndAfgeschermd($ind_afgeschermd)
    {
        if (is_null($ind_afgeschermd)) {
            throw new \InvalidArgumentException('non-nullable ind_afgeschermd cannot be null');
        }
        $this->container['ind_afgeschermd'] = $ind_afgeschermd;

        return $this;
    }

    /**
     * Gets volledig_adres
     *
     * @return string|null
     */
    public function getVolledigAdres()
    {
        return $this->container['volledig_adres'];
    }

    /**
     * Sets volledig_adres
     *
     * @param string|null $volledig_adres volledig_adres
     *
     * @return self
     */
    public function setVolledigAdres($volledig_adres)
    {
        if (is_null($volledig_adres)) {
            throw new \InvalidArgumentException('non-nullable volledig_adres cannot be null');
        }
        $this->container['volledig_adres'] = $volledig_adres;

        return $this;
    }

    /**
     * Gets straatnaam
     *
     * @return string|null
     */
    public function getStraatnaam()
    {
        return $this->container['straatnaam'];
    }

    /**
     * Sets straatnaam
     *
     * @param string|null $straatnaam straatnaam
     *
     * @return self
     */
    public function setStraatnaam($straatnaam)
    {
        if (is_null($straatnaam)) {
            throw new \InvalidArgumentException('non-nullable straatnaam cannot be null');
        }
        $this->container['straatnaam'] = $straatnaam;

        return $this;
    }

    /**
     * Gets huisnummer
     *
     * @return int|null
     */
    public function getHuisnummer()
    {
        return $this->container['huisnummer'];
    }

    /**
     * Sets huisnummer
     *
     * @param int|null $huisnummer huisnummer
     *
     * @return self
     */
    public function setHuisnummer($huisnummer)
    {
        if (is_null($huisnummer)) {
            throw new \InvalidArgumentException('non-nullable huisnummer cannot be null');
        }
        $this->container['huisnummer'] = $huisnummer;

        return $this;
    }

    /**
     * Gets huisletter
     *
     * @return string|null
     */
    public function getHuisletter()
    {
        return $this->container['huisletter'];
    }

    /**
     * Sets huisletter
     *
     * @param string|null $huisletter huisletter
     *
     * @return self
     */
    public function setHuisletter($huisletter)
    {
        if (is_null($huisletter)) {
            throw new \InvalidArgumentException('non-nullable huisletter cannot be null');
        }
        $this->container['huisletter'] = $huisletter;

        return $this;
    }

    /**
     * Gets huisnummer_toevoeging
     *
     * @return string|null
     */
    public function getHuisnummerToevoeging()
    {
        return $this->container['huisnummer_toevoeging'];
    }

    /**
     * Sets huisnummer_toevoeging
     *
     * @param string|null $huisnummer_toevoeging huisnummer_toevoeging
     *
     * @return self
     */
    public function setHuisnummerToevoeging($huisnummer_toevoeging)
    {
        if (is_null($huisnummer_toevoeging)) {
            throw new \InvalidArgumentException('non-nullable huisnummer_toevoeging cannot be null');
        }
        $this->container['huisnummer_toevoeging'] = $huisnummer_toevoeging;

        return $this;
    }

    /**
     * Gets toevoeging_adres
     *
     * @return string|null
     */
    public function getToevoegingAdres()
    {
        return $this->container['toevoeging_adres'];
    }

    /**
     * Sets toevoeging_adres
     *
     * @param string|null $toevoeging_adres toevoeging_adres
     *
     * @return self
     */
    public function setToevoegingAdres($toevoeging_adres)
    {
        if (is_null($toevoeging_adres)) {
            throw new \InvalidArgumentException('non-nullable toevoeging_adres cannot be null');
        }
        $this->container['toevoeging_adres'] = $toevoeging_adres;

        return $this;
    }

    /**
     * Gets postcode
     *
     * @return string|null
     */
    public function getPostcode()
    {
        return $this->container['postcode'];
    }

    /**
     * Sets postcode
     *
     * @param string|null $postcode postcode
     *
     * @return self
     */
    public function setPostcode($postcode)
    {
        if (is_null($postcode)) {
            throw new \InvalidArgumentException('non-nullable postcode cannot be null');
        }
        $this->container['postcode'] = $postcode;

        return $this;
    }

    /**
     * Gets postbusnummer
     *
     * @return int|null
     */
    public function getPostbusnummer()
    {
        return $this->container['postbusnummer'];
    }

    /**
     * Sets postbusnummer
     *
     * @param int|null $postbusnummer postbusnummer
     *
     * @return self
     */
    public function setPostbusnummer($postbusnummer)
    {
        if (is_null($postbusnummer)) {
            throw new \InvalidArgumentException('non-nullable postbusnummer cannot be null');
        }
        $this->container['postbusnummer'] = $postbusnummer;

        return $this;
    }

    /**
     * Gets plaats
     *
     * @return string|null
     */
    public function getPlaats()
    {
        return $this->container['plaats'];
    }

    /**
     * Sets plaats
     *
     * @param string|null $plaats plaats
     *
     * @return self
     */
    public function setPlaats($plaats)
    {
        if (is_null($plaats)) {
            throw new \InvalidArgumentException('non-nullable plaats cannot be null');
        }
        $this->container['plaats'] = $plaats;

        return $this;
    }

    /**
     * Gets straat_huisnummer
     *
     * @return string|null
     */
    public function getStraatHuisnummer()
    {
        return $this->container['straat_huisnummer'];
    }

    /**
     * Sets straat_huisnummer
     *
     * @param string|null $straat_huisnummer straat_huisnummer
     *
     * @return self
     */
    public function setStraatHuisnummer($straat_huisnummer)
    {
        if (is_null($straat_huisnummer)) {
            throw new \InvalidArgumentException('non-nullable straat_huisnummer cannot be null');
        }
        $this->container['straat_huisnummer'] = $straat_huisnummer;

        return $this;
    }

    /**
     * Gets postcode_woonplaats
     *
     * @return string|null
     */
    public function getPostcodeWoonplaats()
    {
        return $this->container['postcode_woonplaats'];
    }

    /**
     * Sets postcode_woonplaats
     *
     * @param string|null $postcode_woonplaats postcode_woonplaats
     *
     * @return self
     */
    public function setPostcodeWoonplaats($postcode_woonplaats)
    {
        if (is_null($postcode_woonplaats)) {
            throw new \InvalidArgumentException('non-nullable postcode_woonplaats cannot be null');
        }
        $this->container['postcode_woonplaats'] = $postcode_woonplaats;

        return $this;
    }

    /**
     * Gets regio
     *
     * @return string|null
     */
    public function getRegio()
    {
        return $this->container['regio'];
    }

    /**
     * Sets regio
     *
     * @param string|null $regio regio
     *
     * @return self
     */
    public function setRegio($regio)
    {
        if (is_null($regio)) {
            throw new \InvalidArgumentException('non-nullable regio cannot be null');
        }
        $this->container['regio'] = $regio;

        return $this;
    }

    /**
     * Gets land
     *
     * @return string|null
     */
    public function getLand()
    {
        return $this->container['land'];
    }

    /**
     * Sets land
     *
     * @param string|null $land land
     *
     * @return self
     */
    public function setLand($land)
    {
        if (is_null($land)) {
            throw new \InvalidArgumentException('non-nullable land cannot be null');
        }
        $this->container['land'] = $land;

        return $this;
    }

    /**
     * Gets geo_data
     *
     * @return \KvK\Model\GeoData|null
     */
    public function getGeoData()
    {
        return $this->container['geo_data'];
    }

    /**
     * Sets geo_data
     *
     * @param \KvK\Model\GeoData|null $geo_data geo_data
     *
     * @return self
     */
    public function setGeoData($geo_data)
    {
        if (is_null($geo_data)) {
            throw new \InvalidArgumentException('non-nullable geo_data cannot be null');
        }
        $this->container['geo_data'] = $geo_data;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


