<?php
/**
 * GewijzigdeEigenaarType
 *
 * PHP version 8.1
 *
 * @category Class
 * @package  KvK
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * API Basisprofiel
 *
 * Documentatie voor API Basisprofiel.
 *
 * The version of the OpenAPI document: 1.4.0
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.14.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace KvK\Model;

use \ArrayAccess;
use \KvK\ObjectSerializer;

/**
 * GewijzigdeEigenaarType Class Doc Comment
 *
 * @category Class
 * @package  KvK
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class GewijzigdeEigenaarType implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'GewijzigdeEigenaarType';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'beperking_in_rechtshandeling' => 'bool',
        'bijzondererechtstoestand' => 'bool',
        'buitenlandse_vennootschap' => 'bool',
        'eenmanszaak' => 'bool',
        'eenmanszaak_met_meerdere_eigenaren' => 'bool',
        'fusie_en_splitsing' => 'bool',
        'ontbinding_en_liquidatie' => 'bool',
        'rechtspersoon' => 'bool',
        'rechtspersoon_activiteiten' => 'bool',
        'rechtspersoon_adresgegevens' => 'bool',
        'rechtspersoon_in_oprichting' => 'bool',
        'samenwerkingsverband' => 'bool'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'beperking_in_rechtshandeling' => null,
        'bijzondererechtstoestand' => null,
        'buitenlandse_vennootschap' => null,
        'eenmanszaak' => null,
        'eenmanszaak_met_meerdere_eigenaren' => null,
        'fusie_en_splitsing' => null,
        'ontbinding_en_liquidatie' => null,
        'rechtspersoon' => null,
        'rechtspersoon_activiteiten' => null,
        'rechtspersoon_adresgegevens' => null,
        'rechtspersoon_in_oprichting' => null,
        'samenwerkingsverband' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'beperking_in_rechtshandeling' => false,
        'bijzondererechtstoestand' => false,
        'buitenlandse_vennootschap' => false,
        'eenmanszaak' => false,
        'eenmanszaak_met_meerdere_eigenaren' => false,
        'fusie_en_splitsing' => false,
        'ontbinding_en_liquidatie' => false,
        'rechtspersoon' => false,
        'rechtspersoon_activiteiten' => false,
        'rechtspersoon_adresgegevens' => false,
        'rechtspersoon_in_oprichting' => false,
        'samenwerkingsverband' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'beperking_in_rechtshandeling' => 'beperkingInRechtshandeling',
        'bijzondererechtstoestand' => 'bijzondererechtstoestand',
        'buitenlandse_vennootschap' => 'buitenlandseVennootschap',
        'eenmanszaak' => 'eenmanszaak',
        'eenmanszaak_met_meerdere_eigenaren' => 'eenmanszaakMetMeerdereEigenaren',
        'fusie_en_splitsing' => 'fusieEnSplitsing',
        'ontbinding_en_liquidatie' => 'ontbindingEnLiquidatie',
        'rechtspersoon' => 'rechtspersoon',
        'rechtspersoon_activiteiten' => 'rechtspersoonActiviteiten',
        'rechtspersoon_adresgegevens' => 'rechtspersoonAdresgegevens',
        'rechtspersoon_in_oprichting' => 'rechtspersoonInOprichting',
        'samenwerkingsverband' => 'samenwerkingsverband'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'beperking_in_rechtshandeling' => 'setBeperkingInRechtshandeling',
        'bijzondererechtstoestand' => 'setBijzondererechtstoestand',
        'buitenlandse_vennootschap' => 'setBuitenlandseVennootschap',
        'eenmanszaak' => 'setEenmanszaak',
        'eenmanszaak_met_meerdere_eigenaren' => 'setEenmanszaakMetMeerdereEigenaren',
        'fusie_en_splitsing' => 'setFusieEnSplitsing',
        'ontbinding_en_liquidatie' => 'setOntbindingEnLiquidatie',
        'rechtspersoon' => 'setRechtspersoon',
        'rechtspersoon_activiteiten' => 'setRechtspersoonActiviteiten',
        'rechtspersoon_adresgegevens' => 'setRechtspersoonAdresgegevens',
        'rechtspersoon_in_oprichting' => 'setRechtspersoonInOprichting',
        'samenwerkingsverband' => 'setSamenwerkingsverband'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'beperking_in_rechtshandeling' => 'getBeperkingInRechtshandeling',
        'bijzondererechtstoestand' => 'getBijzondererechtstoestand',
        'buitenlandse_vennootschap' => 'getBuitenlandseVennootschap',
        'eenmanszaak' => 'getEenmanszaak',
        'eenmanszaak_met_meerdere_eigenaren' => 'getEenmanszaakMetMeerdereEigenaren',
        'fusie_en_splitsing' => 'getFusieEnSplitsing',
        'ontbinding_en_liquidatie' => 'getOntbindingEnLiquidatie',
        'rechtspersoon' => 'getRechtspersoon',
        'rechtspersoon_activiteiten' => 'getRechtspersoonActiviteiten',
        'rechtspersoon_adresgegevens' => 'getRechtspersoonAdresgegevens',
        'rechtspersoon_in_oprichting' => 'getRechtspersoonInOprichting',
        'samenwerkingsverband' => 'getSamenwerkingsverband'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[]|null $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(?array $data = null)
    {
        $this->setIfExists('beperking_in_rechtshandeling', $data ?? [], null);
        $this->setIfExists('bijzondererechtstoestand', $data ?? [], null);
        $this->setIfExists('buitenlandse_vennootschap', $data ?? [], null);
        $this->setIfExists('eenmanszaak', $data ?? [], null);
        $this->setIfExists('eenmanszaak_met_meerdere_eigenaren', $data ?? [], null);
        $this->setIfExists('fusie_en_splitsing', $data ?? [], null);
        $this->setIfExists('ontbinding_en_liquidatie', $data ?? [], null);
        $this->setIfExists('rechtspersoon', $data ?? [], null);
        $this->setIfExists('rechtspersoon_activiteiten', $data ?? [], null);
        $this->setIfExists('rechtspersoon_adresgegevens', $data ?? [], null);
        $this->setIfExists('rechtspersoon_in_oprichting', $data ?? [], null);
        $this->setIfExists('samenwerkingsverband', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['beperking_in_rechtshandeling'] === null) {
            $invalidProperties[] = "'beperking_in_rechtshandeling' can't be null";
        }
        if ($this->container['bijzondererechtstoestand'] === null) {
            $invalidProperties[] = "'bijzondererechtstoestand' can't be null";
        }
        if ($this->container['buitenlandse_vennootschap'] === null) {
            $invalidProperties[] = "'buitenlandse_vennootschap' can't be null";
        }
        if ($this->container['eenmanszaak'] === null) {
            $invalidProperties[] = "'eenmanszaak' can't be null";
        }
        if ($this->container['eenmanszaak_met_meerdere_eigenaren'] === null) {
            $invalidProperties[] = "'eenmanszaak_met_meerdere_eigenaren' can't be null";
        }
        if ($this->container['fusie_en_splitsing'] === null) {
            $invalidProperties[] = "'fusie_en_splitsing' can't be null";
        }
        if ($this->container['ontbinding_en_liquidatie'] === null) {
            $invalidProperties[] = "'ontbinding_en_liquidatie' can't be null";
        }
        if ($this->container['rechtspersoon'] === null) {
            $invalidProperties[] = "'rechtspersoon' can't be null";
        }
        if ($this->container['rechtspersoon_activiteiten'] === null) {
            $invalidProperties[] = "'rechtspersoon_activiteiten' can't be null";
        }
        if ($this->container['rechtspersoon_adresgegevens'] === null) {
            $invalidProperties[] = "'rechtspersoon_adresgegevens' can't be null";
        }
        if ($this->container['rechtspersoon_in_oprichting'] === null) {
            $invalidProperties[] = "'rechtspersoon_in_oprichting' can't be null";
        }
        if ($this->container['samenwerkingsverband'] === null) {
            $invalidProperties[] = "'samenwerkingsverband' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets beperking_in_rechtshandeling
     *
     * @return bool
     */
    public function getBeperkingInRechtshandeling()
    {
        return $this->container['beperking_in_rechtshandeling'];
    }

    /**
     * Sets beperking_in_rechtshandeling
     *
     * @param bool $beperking_in_rechtshandeling beperking_in_rechtshandeling
     *
     * @return self
     */
    public function setBeperkingInRechtshandeling($beperking_in_rechtshandeling)
    {
        if (is_null($beperking_in_rechtshandeling)) {
            throw new \InvalidArgumentException('non-nullable beperking_in_rechtshandeling cannot be null');
        }
        $this->container['beperking_in_rechtshandeling'] = $beperking_in_rechtshandeling;

        return $this;
    }

    /**
     * Gets bijzondererechtstoestand
     *
     * @return bool
     */
    public function getBijzondererechtstoestand()
    {
        return $this->container['bijzondererechtstoestand'];
    }

    /**
     * Sets bijzondererechtstoestand
     *
     * @param bool $bijzondererechtstoestand bijzondererechtstoestand
     *
     * @return self
     */
    public function setBijzondererechtstoestand($bijzondererechtstoestand)
    {
        if (is_null($bijzondererechtstoestand)) {
            throw new \InvalidArgumentException('non-nullable bijzondererechtstoestand cannot be null');
        }
        $this->container['bijzondererechtstoestand'] = $bijzondererechtstoestand;

        return $this;
    }

    /**
     * Gets buitenlandse_vennootschap
     *
     * @return bool
     */
    public function getBuitenlandseVennootschap()
    {
        return $this->container['buitenlandse_vennootschap'];
    }

    /**
     * Sets buitenlandse_vennootschap
     *
     * @param bool $buitenlandse_vennootschap buitenlandse_vennootschap
     *
     * @return self
     */
    public function setBuitenlandseVennootschap($buitenlandse_vennootschap)
    {
        if (is_null($buitenlandse_vennootschap)) {
            throw new \InvalidArgumentException('non-nullable buitenlandse_vennootschap cannot be null');
        }
        $this->container['buitenlandse_vennootschap'] = $buitenlandse_vennootschap;

        return $this;
    }

    /**
     * Gets eenmanszaak
     *
     * @return bool
     */
    public function getEenmanszaak()
    {
        return $this->container['eenmanszaak'];
    }

    /**
     * Sets eenmanszaak
     *
     * @param bool $eenmanszaak eenmanszaak
     *
     * @return self
     */
    public function setEenmanszaak($eenmanszaak)
    {
        if (is_null($eenmanszaak)) {
            throw new \InvalidArgumentException('non-nullable eenmanszaak cannot be null');
        }
        $this->container['eenmanszaak'] = $eenmanszaak;

        return $this;
    }

    /**
     * Gets eenmanszaak_met_meerdere_eigenaren
     *
     * @return bool
     */
    public function getEenmanszaakMetMeerdereEigenaren()
    {
        return $this->container['eenmanszaak_met_meerdere_eigenaren'];
    }

    /**
     * Sets eenmanszaak_met_meerdere_eigenaren
     *
     * @param bool $eenmanszaak_met_meerdere_eigenaren eenmanszaak_met_meerdere_eigenaren
     *
     * @return self
     */
    public function setEenmanszaakMetMeerdereEigenaren($eenmanszaak_met_meerdere_eigenaren)
    {
        if (is_null($eenmanszaak_met_meerdere_eigenaren)) {
            throw new \InvalidArgumentException('non-nullable eenmanszaak_met_meerdere_eigenaren cannot be null');
        }
        $this->container['eenmanszaak_met_meerdere_eigenaren'] = $eenmanszaak_met_meerdere_eigenaren;

        return $this;
    }

    /**
     * Gets fusie_en_splitsing
     *
     * @return bool
     */
    public function getFusieEnSplitsing()
    {
        return $this->container['fusie_en_splitsing'];
    }

    /**
     * Sets fusie_en_splitsing
     *
     * @param bool $fusie_en_splitsing fusie_en_splitsing
     *
     * @return self
     */
    public function setFusieEnSplitsing($fusie_en_splitsing)
    {
        if (is_null($fusie_en_splitsing)) {
            throw new \InvalidArgumentException('non-nullable fusie_en_splitsing cannot be null');
        }
        $this->container['fusie_en_splitsing'] = $fusie_en_splitsing;

        return $this;
    }

    /**
     * Gets ontbinding_en_liquidatie
     *
     * @return bool
     */
    public function getOntbindingEnLiquidatie()
    {
        return $this->container['ontbinding_en_liquidatie'];
    }

    /**
     * Sets ontbinding_en_liquidatie
     *
     * @param bool $ontbinding_en_liquidatie ontbinding_en_liquidatie
     *
     * @return self
     */
    public function setOntbindingEnLiquidatie($ontbinding_en_liquidatie)
    {
        if (is_null($ontbinding_en_liquidatie)) {
            throw new \InvalidArgumentException('non-nullable ontbinding_en_liquidatie cannot be null');
        }
        $this->container['ontbinding_en_liquidatie'] = $ontbinding_en_liquidatie;

        return $this;
    }

    /**
     * Gets rechtspersoon
     *
     * @return bool
     */
    public function getRechtspersoon()
    {
        return $this->container['rechtspersoon'];
    }

    /**
     * Sets rechtspersoon
     *
     * @param bool $rechtspersoon rechtspersoon
     *
     * @return self
     */
    public function setRechtspersoon($rechtspersoon)
    {
        if (is_null($rechtspersoon)) {
            throw new \InvalidArgumentException('non-nullable rechtspersoon cannot be null');
        }
        $this->container['rechtspersoon'] = $rechtspersoon;

        return $this;
    }

    /**
     * Gets rechtspersoon_activiteiten
     *
     * @return bool
     */
    public function getRechtspersoonActiviteiten()
    {
        return $this->container['rechtspersoon_activiteiten'];
    }

    /**
     * Sets rechtspersoon_activiteiten
     *
     * @param bool $rechtspersoon_activiteiten rechtspersoon_activiteiten
     *
     * @return self
     */
    public function setRechtspersoonActiviteiten($rechtspersoon_activiteiten)
    {
        if (is_null($rechtspersoon_activiteiten)) {
            throw new \InvalidArgumentException('non-nullable rechtspersoon_activiteiten cannot be null');
        }
        $this->container['rechtspersoon_activiteiten'] = $rechtspersoon_activiteiten;

        return $this;
    }

    /**
     * Gets rechtspersoon_adresgegevens
     *
     * @return bool
     */
    public function getRechtspersoonAdresgegevens()
    {
        return $this->container['rechtspersoon_adresgegevens'];
    }

    /**
     * Sets rechtspersoon_adresgegevens
     *
     * @param bool $rechtspersoon_adresgegevens rechtspersoon_adresgegevens
     *
     * @return self
     */
    public function setRechtspersoonAdresgegevens($rechtspersoon_adresgegevens)
    {
        if (is_null($rechtspersoon_adresgegevens)) {
            throw new \InvalidArgumentException('non-nullable rechtspersoon_adresgegevens cannot be null');
        }
        $this->container['rechtspersoon_adresgegevens'] = $rechtspersoon_adresgegevens;

        return $this;
    }

    /**
     * Gets rechtspersoon_in_oprichting
     *
     * @return bool
     */
    public function getRechtspersoonInOprichting()
    {
        return $this->container['rechtspersoon_in_oprichting'];
    }

    /**
     * Sets rechtspersoon_in_oprichting
     *
     * @param bool $rechtspersoon_in_oprichting rechtspersoon_in_oprichting
     *
     * @return self
     */
    public function setRechtspersoonInOprichting($rechtspersoon_in_oprichting)
    {
        if (is_null($rechtspersoon_in_oprichting)) {
            throw new \InvalidArgumentException('non-nullable rechtspersoon_in_oprichting cannot be null');
        }
        $this->container['rechtspersoon_in_oprichting'] = $rechtspersoon_in_oprichting;

        return $this;
    }

    /**
     * Gets samenwerkingsverband
     *
     * @return bool
     */
    public function getSamenwerkingsverband()
    {
        return $this->container['samenwerkingsverband'];
    }

    /**
     * Sets samenwerkingsverband
     *
     * @param bool $samenwerkingsverband samenwerkingsverband
     *
     * @return self
     */
    public function setSamenwerkingsverband($samenwerkingsverband)
    {
        if (is_null($samenwerkingsverband)) {
            throw new \InvalidArgumentException('non-nullable samenwerkingsverband cannot be null');
        }
        $this->container['samenwerkingsverband'] = $samenwerkingsverband;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


