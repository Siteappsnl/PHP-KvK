<?php
/**
 * GeoData
 *
 * PHP version 8.1
 *
 * @category Class
 * @package  KvK
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * API Basisprofiel
 *
 * Documentatie voor API Basisprofiel.
 *
 * The version of the OpenAPI document: 1.4.0
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.14.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace KvK\Model;

use \ArrayAccess;
use \KvK\ObjectSerializer;

/**
 * GeoData Class Doc Comment
 *
 * @category Class
 * @description Basisregistratie Adressen en Gebouwen gegevens uit het kadaster
 * @package  KvK
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class GeoData implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'GeoData';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'addresseerbaar_object_id' => 'string',
        'nummer_aanduiding_id' => 'string',
        'gps_latitude' => 'float',
        'gps_longitude' => 'float',
        'rijksdriehoek_x' => 'float',
        'rijksdriehoek_y' => 'float',
        'rijksdriehoek_z' => 'float'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'addresseerbaar_object_id' => null,
        'nummer_aanduiding_id' => null,
        'gps_latitude' => 'double',
        'gps_longitude' => 'double',
        'rijksdriehoek_x' => 'double',
        'rijksdriehoek_y' => 'double',
        'rijksdriehoek_z' => 'double'
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'addresseerbaar_object_id' => false,
        'nummer_aanduiding_id' => false,
        'gps_latitude' => false,
        'gps_longitude' => false,
        'rijksdriehoek_x' => false,
        'rijksdriehoek_y' => false,
        'rijksdriehoek_z' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'addresseerbaar_object_id' => 'addresseerbaarObjectId',
        'nummer_aanduiding_id' => 'nummerAanduidingId',
        'gps_latitude' => 'gpsLatitude',
        'gps_longitude' => 'gpsLongitude',
        'rijksdriehoek_x' => 'rijksdriehoekX',
        'rijksdriehoek_y' => 'rijksdriehoekY',
        'rijksdriehoek_z' => 'rijksdriehoekZ'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'addresseerbaar_object_id' => 'setAddresseerbaarObjectId',
        'nummer_aanduiding_id' => 'setNummerAanduidingId',
        'gps_latitude' => 'setGpsLatitude',
        'gps_longitude' => 'setGpsLongitude',
        'rijksdriehoek_x' => 'setRijksdriehoekX',
        'rijksdriehoek_y' => 'setRijksdriehoekY',
        'rijksdriehoek_z' => 'setRijksdriehoekZ'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'addresseerbaar_object_id' => 'getAddresseerbaarObjectId',
        'nummer_aanduiding_id' => 'getNummerAanduidingId',
        'gps_latitude' => 'getGpsLatitude',
        'gps_longitude' => 'getGpsLongitude',
        'rijksdriehoek_x' => 'getRijksdriehoekX',
        'rijksdriehoek_y' => 'getRijksdriehoekY',
        'rijksdriehoek_z' => 'getRijksdriehoekZ'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[]|null $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(?array $data = null)
    {
        $this->setIfExists('addresseerbaar_object_id', $data ?? [], null);
        $this->setIfExists('nummer_aanduiding_id', $data ?? [], null);
        $this->setIfExists('gps_latitude', $data ?? [], null);
        $this->setIfExists('gps_longitude', $data ?? [], null);
        $this->setIfExists('rijksdriehoek_x', $data ?? [], null);
        $this->setIfExists('rijksdriehoek_y', $data ?? [], null);
        $this->setIfExists('rijksdriehoek_z', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets addresseerbaar_object_id
     *
     * @return string|null
     */
    public function getAddresseerbaarObjectId()
    {
        return $this->container['addresseerbaar_object_id'];
    }

    /**
     * Sets addresseerbaar_object_id
     *
     * @param string|null $addresseerbaar_object_id Unieke BAG id
     *
     * @return self
     */
    public function setAddresseerbaarObjectId($addresseerbaar_object_id)
    {
        if (is_null($addresseerbaar_object_id)) {
            throw new \InvalidArgumentException('non-nullable addresseerbaar_object_id cannot be null');
        }
        $this->container['addresseerbaar_object_id'] = $addresseerbaar_object_id;

        return $this;
    }

    /**
     * Gets nummer_aanduiding_id
     *
     * @return string|null
     */
    public function getNummerAanduidingId()
    {
        return $this->container['nummer_aanduiding_id'];
    }

    /**
     * Sets nummer_aanduiding_id
     *
     * @param string|null $nummer_aanduiding_id Unieke BAG nummeraanduiding id
     *
     * @return self
     */
    public function setNummerAanduidingId($nummer_aanduiding_id)
    {
        if (is_null($nummer_aanduiding_id)) {
            throw new \InvalidArgumentException('non-nullable nummer_aanduiding_id cannot be null');
        }
        $this->container['nummer_aanduiding_id'] = $nummer_aanduiding_id;

        return $this;
    }

    /**
     * Gets gps_latitude
     *
     * @return float|null
     */
    public function getGpsLatitude()
    {
        return $this->container['gps_latitude'];
    }

    /**
     * Sets gps_latitude
     *
     * @param float|null $gps_latitude Lengtegraad
     *
     * @return self
     */
    public function setGpsLatitude($gps_latitude)
    {
        if (is_null($gps_latitude)) {
            throw new \InvalidArgumentException('non-nullable gps_latitude cannot be null');
        }
        $this->container['gps_latitude'] = $gps_latitude;

        return $this;
    }

    /**
     * Gets gps_longitude
     *
     * @return float|null
     */
    public function getGpsLongitude()
    {
        return $this->container['gps_longitude'];
    }

    /**
     * Sets gps_longitude
     *
     * @param float|null $gps_longitude Breedtegraad
     *
     * @return self
     */
    public function setGpsLongitude($gps_longitude)
    {
        if (is_null($gps_longitude)) {
            throw new \InvalidArgumentException('non-nullable gps_longitude cannot be null');
        }
        $this->container['gps_longitude'] = $gps_longitude;

        return $this;
    }

    /**
     * Gets rijksdriehoek_x
     *
     * @return float|null
     */
    public function getRijksdriehoekX()
    {
        return $this->container['rijksdriehoek_x'];
    }

    /**
     * Sets rijksdriehoek_x
     *
     * @param float|null $rijksdriehoek_x Rijksdriehoek X-coördinaat
     *
     * @return self
     */
    public function setRijksdriehoekX($rijksdriehoek_x)
    {
        if (is_null($rijksdriehoek_x)) {
            throw new \InvalidArgumentException('non-nullable rijksdriehoek_x cannot be null');
        }
        $this->container['rijksdriehoek_x'] = $rijksdriehoek_x;

        return $this;
    }

    /**
     * Gets rijksdriehoek_y
     *
     * @return float|null
     */
    public function getRijksdriehoekY()
    {
        return $this->container['rijksdriehoek_y'];
    }

    /**
     * Sets rijksdriehoek_y
     *
     * @param float|null $rijksdriehoek_y Rijksdriehoek Y-coördinaat
     *
     * @return self
     */
    public function setRijksdriehoekY($rijksdriehoek_y)
    {
        if (is_null($rijksdriehoek_y)) {
            throw new \InvalidArgumentException('non-nullable rijksdriehoek_y cannot be null');
        }
        $this->container['rijksdriehoek_y'] = $rijksdriehoek_y;

        return $this;
    }

    /**
     * Gets rijksdriehoek_z
     *
     * @return float|null
     */
    public function getRijksdriehoekZ()
    {
        return $this->container['rijksdriehoek_z'];
    }

    /**
     * Sets rijksdriehoek_z
     *
     * @param float|null $rijksdriehoek_z Rijksdriehoek Z-coördinaat
     *
     * @return self
     */
    public function setRijksdriehoekZ($rijksdriehoek_z)
    {
        if (is_null($rijksdriehoek_z)) {
            throw new \InvalidArgumentException('non-nullable rijksdriehoek_z cannot be null');
        }
        $this->container['rijksdriehoek_z'] = $rijksdriehoek_z;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


