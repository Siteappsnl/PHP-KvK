<?php
/**
 * GewijzigdeFunctionarissenType
 *
 * PHP version 8.1
 *
 * @category Class
 * @package  KvK
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * API Basisprofiel
 *
 * Documentatie voor API Basisprofiel.
 *
 * The version of the OpenAPI document: 1.4.0
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.14.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace KvK\Model;

use \ArrayAccess;
use \KvK\ObjectSerializer;

/**
 * GewijzigdeFunctionarissenType Class Doc Comment
 *
 * @category Class
 * @package  KvK
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class GewijzigdeFunctionarissenType implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'GewijzigdeFunctionarissenType';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'aansprakelijke' => 'bool',
        'bestuursfunctie' => 'bool',
        'functionaris_bijzondere_rechtstoestand' => 'bool',
        'gemachtigde' => 'bool',
        'overige_functionaris' => 'bool',
        'publiek_rechtelijke_functionaris' => 'bool'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'aansprakelijke' => null,
        'bestuursfunctie' => null,
        'functionaris_bijzondere_rechtstoestand' => null,
        'gemachtigde' => null,
        'overige_functionaris' => null,
        'publiek_rechtelijke_functionaris' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'aansprakelijke' => false,
        'bestuursfunctie' => false,
        'functionaris_bijzondere_rechtstoestand' => false,
        'gemachtigde' => false,
        'overige_functionaris' => false,
        'publiek_rechtelijke_functionaris' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'aansprakelijke' => 'aansprakelijke',
        'bestuursfunctie' => 'bestuursfunctie',
        'functionaris_bijzondere_rechtstoestand' => 'functionarisBijzondereRechtstoestand',
        'gemachtigde' => 'gemachtigde',
        'overige_functionaris' => 'overigeFunctionaris',
        'publiek_rechtelijke_functionaris' => 'publiekRechtelijkeFunctionaris'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'aansprakelijke' => 'setAansprakelijke',
        'bestuursfunctie' => 'setBestuursfunctie',
        'functionaris_bijzondere_rechtstoestand' => 'setFunctionarisBijzondereRechtstoestand',
        'gemachtigde' => 'setGemachtigde',
        'overige_functionaris' => 'setOverigeFunctionaris',
        'publiek_rechtelijke_functionaris' => 'setPubliekRechtelijkeFunctionaris'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'aansprakelijke' => 'getAansprakelijke',
        'bestuursfunctie' => 'getBestuursfunctie',
        'functionaris_bijzondere_rechtstoestand' => 'getFunctionarisBijzondereRechtstoestand',
        'gemachtigde' => 'getGemachtigde',
        'overige_functionaris' => 'getOverigeFunctionaris',
        'publiek_rechtelijke_functionaris' => 'getPubliekRechtelijkeFunctionaris'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[]|null $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(?array $data = null)
    {
        $this->setIfExists('aansprakelijke', $data ?? [], null);
        $this->setIfExists('bestuursfunctie', $data ?? [], null);
        $this->setIfExists('functionaris_bijzondere_rechtstoestand', $data ?? [], null);
        $this->setIfExists('gemachtigde', $data ?? [], null);
        $this->setIfExists('overige_functionaris', $data ?? [], null);
        $this->setIfExists('publiek_rechtelijke_functionaris', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['aansprakelijke'] === null) {
            $invalidProperties[] = "'aansprakelijke' can't be null";
        }
        if ($this->container['bestuursfunctie'] === null) {
            $invalidProperties[] = "'bestuursfunctie' can't be null";
        }
        if ($this->container['functionaris_bijzondere_rechtstoestand'] === null) {
            $invalidProperties[] = "'functionaris_bijzondere_rechtstoestand' can't be null";
        }
        if ($this->container['gemachtigde'] === null) {
            $invalidProperties[] = "'gemachtigde' can't be null";
        }
        if ($this->container['overige_functionaris'] === null) {
            $invalidProperties[] = "'overige_functionaris' can't be null";
        }
        if ($this->container['publiek_rechtelijke_functionaris'] === null) {
            $invalidProperties[] = "'publiek_rechtelijke_functionaris' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets aansprakelijke
     *
     * @return bool
     */
    public function getAansprakelijke()
    {
        return $this->container['aansprakelijke'];
    }

    /**
     * Sets aansprakelijke
     *
     * @param bool $aansprakelijke aansprakelijke
     *
     * @return self
     */
    public function setAansprakelijke($aansprakelijke)
    {
        if (is_null($aansprakelijke)) {
            throw new \InvalidArgumentException('non-nullable aansprakelijke cannot be null');
        }
        $this->container['aansprakelijke'] = $aansprakelijke;

        return $this;
    }

    /**
     * Gets bestuursfunctie
     *
     * @return bool
     */
    public function getBestuursfunctie()
    {
        return $this->container['bestuursfunctie'];
    }

    /**
     * Sets bestuursfunctie
     *
     * @param bool $bestuursfunctie bestuursfunctie
     *
     * @return self
     */
    public function setBestuursfunctie($bestuursfunctie)
    {
        if (is_null($bestuursfunctie)) {
            throw new \InvalidArgumentException('non-nullable bestuursfunctie cannot be null');
        }
        $this->container['bestuursfunctie'] = $bestuursfunctie;

        return $this;
    }

    /**
     * Gets functionaris_bijzondere_rechtstoestand
     *
     * @return bool
     */
    public function getFunctionarisBijzondereRechtstoestand()
    {
        return $this->container['functionaris_bijzondere_rechtstoestand'];
    }

    /**
     * Sets functionaris_bijzondere_rechtstoestand
     *
     * @param bool $functionaris_bijzondere_rechtstoestand functionaris_bijzondere_rechtstoestand
     *
     * @return self
     */
    public function setFunctionarisBijzondereRechtstoestand($functionaris_bijzondere_rechtstoestand)
    {
        if (is_null($functionaris_bijzondere_rechtstoestand)) {
            throw new \InvalidArgumentException('non-nullable functionaris_bijzondere_rechtstoestand cannot be null');
        }
        $this->container['functionaris_bijzondere_rechtstoestand'] = $functionaris_bijzondere_rechtstoestand;

        return $this;
    }

    /**
     * Gets gemachtigde
     *
     * @return bool
     */
    public function getGemachtigde()
    {
        return $this->container['gemachtigde'];
    }

    /**
     * Sets gemachtigde
     *
     * @param bool $gemachtigde gemachtigde
     *
     * @return self
     */
    public function setGemachtigde($gemachtigde)
    {
        if (is_null($gemachtigde)) {
            throw new \InvalidArgumentException('non-nullable gemachtigde cannot be null');
        }
        $this->container['gemachtigde'] = $gemachtigde;

        return $this;
    }

    /**
     * Gets overige_functionaris
     *
     * @return bool
     */
    public function getOverigeFunctionaris()
    {
        return $this->container['overige_functionaris'];
    }

    /**
     * Sets overige_functionaris
     *
     * @param bool $overige_functionaris overige_functionaris
     *
     * @return self
     */
    public function setOverigeFunctionaris($overige_functionaris)
    {
        if (is_null($overige_functionaris)) {
            throw new \InvalidArgumentException('non-nullable overige_functionaris cannot be null');
        }
        $this->container['overige_functionaris'] = $overige_functionaris;

        return $this;
    }

    /**
     * Gets publiek_rechtelijke_functionaris
     *
     * @return bool
     */
    public function getPubliekRechtelijkeFunctionaris()
    {
        return $this->container['publiek_rechtelijke_functionaris'];
    }

    /**
     * Sets publiek_rechtelijke_functionaris
     *
     * @param bool $publiek_rechtelijke_functionaris publiek_rechtelijke_functionaris
     *
     * @return self
     */
    public function setPubliekRechtelijkeFunctionaris($publiek_rechtelijke_functionaris)
    {
        if (is_null($publiek_rechtelijke_functionaris)) {
            throw new \InvalidArgumentException('non-nullable publiek_rechtelijke_functionaris cannot be null');
        }
        $this->container['publiek_rechtelijke_functionaris'] = $publiek_rechtelijke_functionaris;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


