<?php
/**
 * Basisprofiel
 *
 * PHP version 8.1
 *
 * @category Class
 * @package  KvK
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * API Basisprofiel
 *
 * Documentatie voor API Basisprofiel.
 *
 * The version of the OpenAPI document: 1.4.0
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.14.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace KvK\Model;

use \ArrayAccess;
use \KvK\ObjectSerializer;

/**
 * Basisprofiel Class Doc Comment
 *
 * @category Class
 * @package  KvK
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class Basisprofiel implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'Basisprofiel';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'kvk_nummer' => 'string',
        'ind_non_mailing' => 'string',
        'naam' => 'string',
        'formele_registratiedatum' => 'string',
        'materiele_registratie' => '\KvK\Model\MaterieleRegistratie',
        'totaal_werkzame_personen' => 'int',
        'statutaire_naam' => 'string',
        'handelsnamen' => '\KvK\Model\Handelsnaam[]',
        'sbi_activiteiten' => '\KvK\Model\SBIActiviteit[]',
        '_links' => 'array<string,\KvK\Model\Link>',
        '_embedded' => '\KvK\Model\EmbeddedContainer'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'kvk_nummer' => null,
        'ind_non_mailing' => null,
        'naam' => null,
        'formele_registratiedatum' => null,
        'materiele_registratie' => null,
        'totaal_werkzame_personen' => 'int32',
        'statutaire_naam' => null,
        'handelsnamen' => null,
        'sbi_activiteiten' => null,
        '_links' => null,
        '_embedded' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'kvk_nummer' => false,
        'ind_non_mailing' => false,
        'naam' => false,
        'formele_registratiedatum' => false,
        'materiele_registratie' => false,
        'totaal_werkzame_personen' => false,
        'statutaire_naam' => false,
        'handelsnamen' => false,
        'sbi_activiteiten' => false,
        '_links' => false,
        '_embedded' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'kvk_nummer' => 'kvkNummer',
        'ind_non_mailing' => 'indNonMailing',
        'naam' => 'naam',
        'formele_registratiedatum' => 'formeleRegistratiedatum',
        'materiele_registratie' => 'materieleRegistratie',
        'totaal_werkzame_personen' => 'totaalWerkzamePersonen',
        'statutaire_naam' => 'statutaireNaam',
        'handelsnamen' => 'handelsnamen',
        'sbi_activiteiten' => 'sbiActiviteiten',
        '_links' => '_links',
        '_embedded' => '_embedded'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'kvk_nummer' => 'setKvkNummer',
        'ind_non_mailing' => 'setIndNonMailing',
        'naam' => 'setNaam',
        'formele_registratiedatum' => 'setFormeleRegistratiedatum',
        'materiele_registratie' => 'setMaterieleRegistratie',
        'totaal_werkzame_personen' => 'setTotaalWerkzamePersonen',
        'statutaire_naam' => 'setStatutaireNaam',
        'handelsnamen' => 'setHandelsnamen',
        'sbi_activiteiten' => 'setSbiActiviteiten',
        '_links' => 'setLinks',
        '_embedded' => 'setEmbedded'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'kvk_nummer' => 'getKvkNummer',
        'ind_non_mailing' => 'getIndNonMailing',
        'naam' => 'getNaam',
        'formele_registratiedatum' => 'getFormeleRegistratiedatum',
        'materiele_registratie' => 'getMaterieleRegistratie',
        'totaal_werkzame_personen' => 'getTotaalWerkzamePersonen',
        'statutaire_naam' => 'getStatutaireNaam',
        'handelsnamen' => 'getHandelsnamen',
        'sbi_activiteiten' => 'getSbiActiviteiten',
        '_links' => 'getLinks',
        '_embedded' => 'getEmbedded'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[]|null $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(?array $data = null)
    {
        $this->setIfExists('kvk_nummer', $data ?? [], null);
        $this->setIfExists('ind_non_mailing', $data ?? [], null);
        $this->setIfExists('naam', $data ?? [], null);
        $this->setIfExists('formele_registratiedatum', $data ?? [], null);
        $this->setIfExists('materiele_registratie', $data ?? [], null);
        $this->setIfExists('totaal_werkzame_personen', $data ?? [], null);
        $this->setIfExists('statutaire_naam', $data ?? [], null);
        $this->setIfExists('handelsnamen', $data ?? [], null);
        $this->setIfExists('sbi_activiteiten', $data ?? [], null);
        $this->setIfExists('_links', $data ?? [], null);
        $this->setIfExists('_embedded', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets kvk_nummer
     *
     * @return string|null
     */
    public function getKvkNummer()
    {
        return $this->container['kvk_nummer'];
    }

    /**
     * Sets kvk_nummer
     *
     * @param string|null $kvk_nummer Nederlands Kamer van Koophandel nummer: bestaat uit 8 cijfers
     *
     * @return self
     */
    public function setKvkNummer($kvk_nummer)
    {
        if (is_null($kvk_nummer)) {
            throw new \InvalidArgumentException('non-nullable kvk_nummer cannot be null');
        }
        $this->container['kvk_nummer'] = $kvk_nummer;

        return $this;
    }

    /**
     * Gets ind_non_mailing
     *
     * @return string|null
     */
    public function getIndNonMailing()
    {
        return $this->container['ind_non_mailing'];
    }

    /**
     * Sets ind_non_mailing
     *
     * @param string|null $ind_non_mailing Hiermee geeft de onderneming aan geen ongevraagde reclame per post of verkoop aan de deur te willen ontvangen
     *
     * @return self
     */
    public function setIndNonMailing($ind_non_mailing)
    {
        if (is_null($ind_non_mailing)) {
            throw new \InvalidArgumentException('non-nullable ind_non_mailing cannot be null');
        }
        $this->container['ind_non_mailing'] = $ind_non_mailing;

        return $this;
    }

    /**
     * Gets naam
     *
     * @return string|null
     */
    public function getNaam()
    {
        return $this->container['naam'];
    }

    /**
     * Sets naam
     *
     * @param string|null $naam Naam onder Maatschappelijke Activiteit
     *
     * @return self
     */
    public function setNaam($naam)
    {
        if (is_null($naam)) {
            throw new \InvalidArgumentException('non-nullable naam cannot be null');
        }
        $this->container['naam'] = $naam;

        return $this;
    }

    /**
     * Gets formele_registratiedatum
     *
     * @return string|null
     */
    public function getFormeleRegistratiedatum()
    {
        return $this->container['formele_registratiedatum'];
    }

    /**
     * Sets formele_registratiedatum
     *
     * @param string|null $formele_registratiedatum Registratiedatum onderneming in HR
     *
     * @return self
     */
    public function setFormeleRegistratiedatum($formele_registratiedatum)
    {
        if (is_null($formele_registratiedatum)) {
            throw new \InvalidArgumentException('non-nullable formele_registratiedatum cannot be null');
        }
        $this->container['formele_registratiedatum'] = $formele_registratiedatum;

        return $this;
    }

    /**
     * Gets materiele_registratie
     *
     * @return \KvK\Model\MaterieleRegistratie|null
     */
    public function getMaterieleRegistratie()
    {
        return $this->container['materiele_registratie'];
    }

    /**
     * Sets materiele_registratie
     *
     * @param \KvK\Model\MaterieleRegistratie|null $materiele_registratie materiele_registratie
     *
     * @return self
     */
    public function setMaterieleRegistratie($materiele_registratie)
    {
        if (is_null($materiele_registratie)) {
            throw new \InvalidArgumentException('non-nullable materiele_registratie cannot be null');
        }
        $this->container['materiele_registratie'] = $materiele_registratie;

        return $this;
    }

    /**
     * Gets totaal_werkzame_personen
     *
     * @return int|null
     */
    public function getTotaalWerkzamePersonen()
    {
        return $this->container['totaal_werkzame_personen'];
    }

    /**
     * Sets totaal_werkzame_personen
     *
     * @param int|null $totaal_werkzame_personen Totaal aantal werkzame personen
     *
     * @return self
     */
    public function setTotaalWerkzamePersonen($totaal_werkzame_personen)
    {
        if (is_null($totaal_werkzame_personen)) {
            throw new \InvalidArgumentException('non-nullable totaal_werkzame_personen cannot be null');
        }
        $this->container['totaal_werkzame_personen'] = $totaal_werkzame_personen;

        return $this;
    }

    /**
     * Gets statutaire_naam
     *
     * @return string|null
     */
    public function getStatutaireNaam()
    {
        return $this->container['statutaire_naam'];
    }

    /**
     * Sets statutaire_naam
     *
     * @param string|null $statutaire_naam De naam van de onderneming wanneer er statuten geregistreerd zijn.
     *
     * @return self
     */
    public function setStatutaireNaam($statutaire_naam)
    {
        if (is_null($statutaire_naam)) {
            throw new \InvalidArgumentException('non-nullable statutaire_naam cannot be null');
        }
        $this->container['statutaire_naam'] = $statutaire_naam;

        return $this;
    }

    /**
     * Gets handelsnamen
     *
     * @return \KvK\Model\Handelsnaam[]|null
     */
    public function getHandelsnamen()
    {
        return $this->container['handelsnamen'];
    }

    /**
     * Sets handelsnamen
     *
     * @param \KvK\Model\Handelsnaam[]|null $handelsnamen Alle namen waaronder een onderneming of vestiging handelt (op volgorde van registreren)
     *
     * @return self
     */
    public function setHandelsnamen($handelsnamen)
    {
        if (is_null($handelsnamen)) {
            throw new \InvalidArgumentException('non-nullable handelsnamen cannot be null');
        }
        $this->container['handelsnamen'] = $handelsnamen;

        return $this;
    }

    /**
     * Gets sbi_activiteiten
     *
     * @return \KvK\Model\SBIActiviteit[]|null
     */
    public function getSbiActiviteiten()
    {
        return $this->container['sbi_activiteiten'];
    }

    /**
     * Sets sbi_activiteiten
     *
     * @param \KvK\Model\SBIActiviteit[]|null $sbi_activiteiten Code beschrijving van SBI activiteiten conform SBI 2008 (Standard Industrial Classification). Er wordt geen maximering toegepast in de resultaten. Zie ook KVK.nl/sbi
     *
     * @return self
     */
    public function setSbiActiviteiten($sbi_activiteiten)
    {
        if (is_null($sbi_activiteiten)) {
            throw new \InvalidArgumentException('non-nullable sbi_activiteiten cannot be null');
        }
        $this->container['sbi_activiteiten'] = $sbi_activiteiten;

        return $this;
    }

    /**
     * Gets _links
     *
     * @return array<string,\KvK\Model\Link>|null
     */
    public function getLinks()
    {
        return $this->container['_links'];
    }

    /**
     * Sets _links
     *
     * @param array<string,\KvK\Model\Link>|null $_links _links
     *
     * @return self
     */
    public function setLinks($_links)
    {
        if (is_null($_links)) {
            throw new \InvalidArgumentException('non-nullable _links cannot be null');
        }
        $this->container['_links'] = $_links;

        return $this;
    }

    /**
     * Gets _embedded
     *
     * @return \KvK\Model\EmbeddedContainer|null
     */
    public function getEmbedded()
    {
        return $this->container['_embedded'];
    }

    /**
     * Sets _embedded
     *
     * @param \KvK\Model\EmbeddedContainer|null $_embedded _embedded
     *
     * @return self
     */
    public function setEmbedded($_embedded)
    {
        if (is_null($_embedded)) {
            throw new \InvalidArgumentException('non-nullable _embedded cannot be null');
        }
        $this->container['_embedded'] = $_embedded;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


