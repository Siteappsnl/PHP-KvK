<?php
/**
 * PagedSignalenHalJsonType
 *
 * PHP version 8.1
 *
 * @category Class
 * @package  KvK
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * API Basisprofiel
 *
 * Documentatie voor API Basisprofiel.
 *
 * The version of the OpenAPI document: 1.4.0
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.14.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace KvK\Model;

use \ArrayAccess;
use \KvK\ObjectSerializer;

/**
 * PagedSignalenHalJsonType Class Doc Comment
 *
 * @category Class
 * @package  KvK
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class PagedSignalenHalJsonType implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'PagedSignalenHalJsonType';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'pagina' => 'int',
        'aantal' => 'int',
        'totaal' => 'float',
        'totaal_paginas' => 'int',
        'signalen' => '\KvK\Model\SignaalInfoHal[]',
        'vorige' => 'string',
        'volgende' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'pagina' => null,
        'aantal' => null,
        'totaal' => null,
        'totaal_paginas' => null,
        'signalen' => null,
        'vorige' => null,
        'volgende' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'pagina' => false,
        'aantal' => false,
        'totaal' => false,
        'totaal_paginas' => false,
        'signalen' => false,
        'vorige' => false,
        'volgende' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'pagina' => 'pagina',
        'aantal' => 'aantal',
        'totaal' => 'totaal',
        'totaal_paginas' => 'totaalPaginas',
        'signalen' => 'signalen',
        'vorige' => 'vorige',
        'volgende' => 'volgende'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'pagina' => 'setPagina',
        'aantal' => 'setAantal',
        'totaal' => 'setTotaal',
        'totaal_paginas' => 'setTotaalPaginas',
        'signalen' => 'setSignalen',
        'vorige' => 'setVorige',
        'volgende' => 'setVolgende'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'pagina' => 'getPagina',
        'aantal' => 'getAantal',
        'totaal' => 'getTotaal',
        'totaal_paginas' => 'getTotaalPaginas',
        'signalen' => 'getSignalen',
        'vorige' => 'getVorige',
        'volgende' => 'getVolgende'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[]|null $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(?array $data = null)
    {
        $this->setIfExists('pagina', $data ?? [], null);
        $this->setIfExists('aantal', $data ?? [], null);
        $this->setIfExists('totaal', $data ?? [], null);
        $this->setIfExists('totaal_paginas', $data ?? [], null);
        $this->setIfExists('signalen', $data ?? [], null);
        $this->setIfExists('vorige', $data ?? [], null);
        $this->setIfExists('volgende', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['pagina'] === null) {
            $invalidProperties[] = "'pagina' can't be null";
        }
        if ($this->container['aantal'] === null) {
            $invalidProperties[] = "'aantal' can't be null";
        }
        if ($this->container['totaal'] === null) {
            $invalidProperties[] = "'totaal' can't be null";
        }
        if ($this->container['totaal_paginas'] === null) {
            $invalidProperties[] = "'totaal_paginas' can't be null";
        }
        if ($this->container['signalen'] === null) {
            $invalidProperties[] = "'signalen' can't be null";
        }
        if ($this->container['vorige'] === null) {
            $invalidProperties[] = "'vorige' can't be null";
        }
        if ($this->container['volgende'] === null) {
            $invalidProperties[] = "'volgende' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets pagina
     *
     * @return int
     */
    public function getPagina()
    {
        return $this->container['pagina'];
    }

    /**
     * Sets pagina
     *
     * @param int $pagina pagina
     *
     * @return self
     */
    public function setPagina($pagina)
    {
        if (is_null($pagina)) {
            throw new \InvalidArgumentException('non-nullable pagina cannot be null');
        }
        $this->container['pagina'] = $pagina;

        return $this;
    }

    /**
     * Gets aantal
     *
     * @return int
     */
    public function getAantal()
    {
        return $this->container['aantal'];
    }

    /**
     * Sets aantal
     *
     * @param int $aantal aantal
     *
     * @return self
     */
    public function setAantal($aantal)
    {
        if (is_null($aantal)) {
            throw new \InvalidArgumentException('non-nullable aantal cannot be null');
        }
        $this->container['aantal'] = $aantal;

        return $this;
    }

    /**
     * Gets totaal
     *
     * @return float
     */
    public function getTotaal()
    {
        return $this->container['totaal'];
    }

    /**
     * Sets totaal
     *
     * @param float $totaal totaal
     *
     * @return self
     */
    public function setTotaal($totaal)
    {
        if (is_null($totaal)) {
            throw new \InvalidArgumentException('non-nullable totaal cannot be null');
        }
        $this->container['totaal'] = $totaal;

        return $this;
    }

    /**
     * Gets totaal_paginas
     *
     * @return int
     */
    public function getTotaalPaginas()
    {
        return $this->container['totaal_paginas'];
    }

    /**
     * Sets totaal_paginas
     *
     * @param int $totaal_paginas totaal_paginas
     *
     * @return self
     */
    public function setTotaalPaginas($totaal_paginas)
    {
        if (is_null($totaal_paginas)) {
            throw new \InvalidArgumentException('non-nullable totaal_paginas cannot be null');
        }
        $this->container['totaal_paginas'] = $totaal_paginas;

        return $this;
    }

    /**
     * Gets signalen
     *
     * @return \KvK\Model\SignaalInfoHal[]
     */
    public function getSignalen()
    {
        return $this->container['signalen'];
    }

    /**
     * Sets signalen
     *
     * @param \KvK\Model\SignaalInfoHal[] $signalen signalen
     *
     * @return self
     */
    public function setSignalen($signalen)
    {
        if (is_null($signalen)) {
            throw new \InvalidArgumentException('non-nullable signalen cannot be null');
        }
        $this->container['signalen'] = $signalen;

        return $this;
    }

    /**
     * Gets vorige
     *
     * @return string
     */
    public function getVorige()
    {
        return $this->container['vorige'];
    }

    /**
     * Sets vorige
     *
     * @param string $vorige vorige
     *
     * @return self
     */
    public function setVorige($vorige)
    {
        if (is_null($vorige)) {
            throw new \InvalidArgumentException('non-nullable vorige cannot be null');
        }
        $this->container['vorige'] = $vorige;

        return $this;
    }

    /**
     * Gets volgende
     *
     * @return string
     */
    public function getVolgende()
    {
        return $this->container['volgende'];
    }

    /**
     * Sets volgende
     *
     * @param string $volgende volgende
     *
     * @return self
     */
    public function setVolgende($volgende)
    {
        if (is_null($volgende)) {
            throw new \InvalidArgumentException('non-nullable volgende cannot be null');
        }
        $this->container['volgende'] = $volgende;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


