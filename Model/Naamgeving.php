<?php
/**
 * Naamgeving
 *
 * PHP version 8.1
 *
 * @category Class
 * @package  KvK
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * API Basisprofiel
 *
 * Documentatie voor API Basisprofiel.
 *
 * The version of the OpenAPI document: 1.4.0
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.14.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace KvK\Model;

use \ArrayAccess;
use \KvK\ObjectSerializer;

/**
 * Naamgeving Class Doc Comment
 *
 * @category Class
 * @package  KvK
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class Naamgeving implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'Naamgeving';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'kvk_nummer' => 'string',
        'rsin' => 'string',
        'statutaire_naam' => 'string',
        'naam' => 'string',
        'ook_genoemd' => 'string',
        'startdatum' => 'string',
        'einddatum' => 'string',
        'vestigingen' => '\KvK\Model\Vestiging2[]',
        '_links' => '\KvK\Model\NaamgevingLinks'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'kvk_nummer' => null,
        'rsin' => null,
        'statutaire_naam' => null,
        'naam' => null,
        'ook_genoemd' => null,
        'startdatum' => null,
        'einddatum' => null,
        'vestigingen' => null,
        '_links' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'kvk_nummer' => false,
        'rsin' => false,
        'statutaire_naam' => false,
        'naam' => false,
        'ook_genoemd' => false,
        'startdatum' => false,
        'einddatum' => false,
        'vestigingen' => false,
        '_links' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'kvk_nummer' => 'kvkNummer',
        'rsin' => 'rsin',
        'statutaire_naam' => 'statutaireNaam',
        'naam' => 'naam',
        'ook_genoemd' => 'ookGenoemd',
        'startdatum' => 'startdatum',
        'einddatum' => 'einddatum',
        'vestigingen' => 'vestigingen',
        '_links' => '_links'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'kvk_nummer' => 'setKvkNummer',
        'rsin' => 'setRsin',
        'statutaire_naam' => 'setStatutaireNaam',
        'naam' => 'setNaam',
        'ook_genoemd' => 'setOokGenoemd',
        'startdatum' => 'setStartdatum',
        'einddatum' => 'setEinddatum',
        'vestigingen' => 'setVestigingen',
        '_links' => 'setLinks'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'kvk_nummer' => 'getKvkNummer',
        'rsin' => 'getRsin',
        'statutaire_naam' => 'getStatutaireNaam',
        'naam' => 'getNaam',
        'ook_genoemd' => 'getOokGenoemd',
        'startdatum' => 'getStartdatum',
        'einddatum' => 'getEinddatum',
        'vestigingen' => 'getVestigingen',
        '_links' => 'getLinks'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[]|null $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(?array $data = null)
    {
        $this->setIfExists('kvk_nummer', $data ?? [], null);
        $this->setIfExists('rsin', $data ?? [], null);
        $this->setIfExists('statutaire_naam', $data ?? [], null);
        $this->setIfExists('naam', $data ?? [], null);
        $this->setIfExists('ook_genoemd', $data ?? [], null);
        $this->setIfExists('startdatum', $data ?? [], null);
        $this->setIfExists('einddatum', $data ?? [], null);
        $this->setIfExists('vestigingen', $data ?? [], null);
        $this->setIfExists('_links', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['kvk_nummer'] === null) {
            $invalidProperties[] = "'kvk_nummer' can't be null";
        }
        if (!is_null($this->container['rsin']) && !preg_match("/^[0-9]{9}$/", $this->container['rsin'])) {
            $invalidProperties[] = "invalid value for 'rsin', must be conform to the pattern /^[0-9]{9}$/.";
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets kvk_nummer
     *
     * @return string
     */
    public function getKvkNummer()
    {
        return $this->container['kvk_nummer'];
    }

    /**
     * Sets kvk_nummer
     *
     * @param string $kvk_nummer Nederlands Kamer van Koophandel nummer
     *
     * @return self
     */
    public function setKvkNummer($kvk_nummer)
    {
        if (is_null($kvk_nummer)) {
            throw new \InvalidArgumentException('non-nullable kvk_nummer cannot be null');
        }
        $this->container['kvk_nummer'] = $kvk_nummer;

        return $this;
    }

    /**
     * Gets rsin
     *
     * @return string|null
     */
    public function getRsin()
    {
        return $this->container['rsin'];
    }

    /**
     * Sets rsin
     *
     * @param string|null $rsin RSIN (Rechtspersonen en Samenwerkingsverbanden Informatienummer)  Het RSIN kan voorloopnullen bevatten
     *
     * @return self
     */
    public function setRsin($rsin)
    {
        if (is_null($rsin)) {
            throw new \InvalidArgumentException('non-nullable rsin cannot be null');
        }

        if ((!preg_match("/^[0-9]{9}$/", ObjectSerializer::toString($rsin)))) {
            throw new \InvalidArgumentException("invalid value for \$rsin when calling Naamgeving., must conform to the pattern /^[0-9]{9}$/.");
        }

        $this->container['rsin'] = $rsin;

        return $this;
    }

    /**
     * Gets statutaire_naam
     *
     * @return string|null
     */
    public function getStatutaireNaam()
    {
        return $this->container['statutaire_naam'];
    }

    /**
     * Sets statutaire_naam
     *
     * @param string|null $statutaire_naam De naam van de rechtspersoon die opgenomen is in de oprichtingsakte
     *
     * @return self
     */
    public function setStatutaireNaam($statutaire_naam)
    {
        if (is_null($statutaire_naam)) {
            throw new \InvalidArgumentException('non-nullable statutaire_naam cannot be null');
        }
        $this->container['statutaire_naam'] = $statutaire_naam;

        return $this;
    }

    /**
     * Gets naam
     *
     * @return string|null
     */
    public function getNaam()
    {
        return $this->container['naam'];
    }

    /**
     * Sets naam
     *
     * @param string|null $naam Naam of eerste handelsnaam van de inschrijving
     *
     * @return self
     */
    public function setNaam($naam)
    {
        if (is_null($naam)) {
            throw new \InvalidArgumentException('non-nullable naam cannot be null');
        }
        $this->container['naam'] = $naam;

        return $this;
    }

    /**
     * Gets ook_genoemd
     *
     * @return string|null
     */
    public function getOokGenoemd()
    {
        return $this->container['ook_genoemd'];
    }

    /**
     * Sets ook_genoemd
     *
     * @param string|null $ook_genoemd Een andere naam waaronder de vereniging, stichtingen en vereniging van eigenaars ook bekend is
     *
     * @return self
     */
    public function setOokGenoemd($ook_genoemd)
    {
        if (is_null($ook_genoemd)) {
            throw new \InvalidArgumentException('non-nullable ook_genoemd cannot be null');
        }
        $this->container['ook_genoemd'] = $ook_genoemd;

        return $this;
    }

    /**
     * Gets startdatum
     *
     * @return string|null
     */
    public function getStartdatum()
    {
        return $this->container['startdatum'];
    }

    /**
     * Sets startdatum
     *
     * @param string|null $startdatum In het handelsregister hebben we voor verschillende dossiers niet de exacte datums kunnen vastleggen. We volgen hier de Handels Register datum vastlegging voor. Hierdoor kan bij een onbekend deel van een datum nullen bevatten. Bij een volledig bekende datum is het formaat YYYYMMDD ( Jaar maand dag), waarbij alleen cijfers zijn toegestaan, inclusief de 0 voor onbekende delen van de datum.  __Mogelijke formaten van waarden__  | Type            | Formaat   | | --------------- | --------- | | Volledige datum | 20150622  | | Dag onbekend    | 20150600  | | Maand onbekend  | 20150012  | | Datum onbekend  | 00000000  |
     *
     * @return self
     */
    public function setStartdatum($startdatum)
    {
        if (is_null($startdatum)) {
            throw new \InvalidArgumentException('non-nullable startdatum cannot be null');
        }
        $this->container['startdatum'] = $startdatum;

        return $this;
    }

    /**
     * Gets einddatum
     *
     * @return string|null
     */
    public function getEinddatum()
    {
        return $this->container['einddatum'];
    }

    /**
     * Sets einddatum
     *
     * @param string|null $einddatum In het handelsregister hebben we voor verschillende dossiers niet de exacte datums kunnen vastleggen. We volgen hier de Handels Register datum vastlegging voor. Hierdoor kan bij een onbekend deel van een datum nullen bevatten. Bij een volledig bekende datum is het formaat YYYYMMDD ( Jaar maand dag), waarbij alleen cijfers zijn toegestaan, inclusief de 0 voor onbekende delen van de datum.  __Mogelijke formaten van waarden__  | Type            | Formaat   | | --------------- | --------- | | Volledige datum | 20150622  | | Dag onbekend    | 20150600  | | Maand onbekend  | 20150012  | | Datum onbekend  | 00000000  |
     *
     * @return self
     */
    public function setEinddatum($einddatum)
    {
        if (is_null($einddatum)) {
            throw new \InvalidArgumentException('non-nullable einddatum cannot be null');
        }
        $this->container['einddatum'] = $einddatum;

        return $this;
    }

    /**
     * Gets vestigingen
     *
     * @return \KvK\Model\Vestiging2[]|null
     */
    public function getVestigingen()
    {
        return $this->container['vestigingen'];
    }

    /**
     * Sets vestigingen
     *
     * @param \KvK\Model\Vestiging2[]|null $vestigingen Lijst van vestigingen
     *
     * @return self
     */
    public function setVestigingen($vestigingen)
    {
        if (is_null($vestigingen)) {
            throw new \InvalidArgumentException('non-nullable vestigingen cannot be null');
        }
        $this->container['vestigingen'] = $vestigingen;

        return $this;
    }

    /**
     * Gets _links
     *
     * @return \KvK\Model\NaamgevingLinks|null
     */
    public function getLinks()
    {
        return $this->container['_links'];
    }

    /**
     * Sets _links
     *
     * @param \KvK\Model\NaamgevingLinks|null $_links _links
     *
     * @return self
     */
    public function setLinks($_links)
    {
        if (is_null($_links)) {
            throw new \InvalidArgumentException('non-nullable _links cannot be null');
        }
        $this->container['_links'] = $_links;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


